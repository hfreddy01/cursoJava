package cursoJava.historiaJava;

public class HistoriaJava {
	
 /**
  *******************************************************************************************************************************
  *******************************************************************************************************************************
  * HISTORIA JAVA : 
  * 
  * JAVA ES UN LENGUAJE DE PROGRAMACION ORIENTADO A OBJETO, CASE SENCITII, ES DECIR QUE DISTINGUE ENTRE MAYUSCULAS Y MINUSCULAS 
  * CREADDO POR "SUN MICROSYSTEMS" ESTE LENGUAJE FUE CREADO POR PATRICK NEWTON Y JAMES GOSLING EN 1991, ESTE LENGUAJE SE CREO 
  * ORIGINALMENTE ORIENTADO A ELECTRODOMESTICOS.
  * 
  * JAVA, COMO LENGUAJE DE PROGRAMCION, SE INTRODUJO A FINALES DE 1995. LA CLAVE FUE LA INCORPORACION DE UN INTERPRETE 
  * JAVA EN EL PROGRAMA NETSCAPE NAVIGATOR, VERSION 2.0, PRODUCIENDO UNA VERDADERA REVOLUCION EN INTERNET. JAVA 1.1 
  * APARECIO A PRINCIPIOS DE 1997, MEJORANDO SUSTANCIALMENTE LA PRIMERA VERSION DEL LENGUAJE, ACTUALMENTE JAVA SE ENCUENTRA
  * EN LA VERSION 11.
  * 
  * NOTA : AL PROGRAMAR EN JAVA NO SE PARTE DE CERO. CUALQUIER APLICACION QUE SE DESARROLLE EN JAVA "CUELGA (0 SE APOYA, 
  * SEGUN COMO SE QUIERA VER) EN UN GRAN NUMERO DE CLASES PREEXISTENTES. ALGUNAS DE ELLAS LAS HA PODIOD HACER EL PROPIO 
  * USUARIO, OTRAS PUEDEN SER COMERCIALES, PERO SIEMPRE HAY UN NUMERO MUY IMPORTANTES DE CLASES QUE FORMAN PARTE DEL 
  * PROPIO LENGUAJE. INGRESA EN  https://docs.oracle.com/javase/11/docs/api/ PARA VISUALIZAR LA API DE JAVA.
  *******************************************************************************************************************************
  *******************************************************************************************************************************
  *	CARACTERISTICAS DE JAVA : 
  *
  * A CONTINUACION DE INCLUYE UNA LISTA DE LAS CARACTERISTICAS MAS INPORTANTES DEL LENGUAJE JAVA.
  *
  * SIMPLE : JAVA ES MUY FACIL DE APRENDER Y SU SINTAXIS ES SIMPLE, LIMPIA Y FACIL DE ENTENDER. SEGUN SUN, EL LENGUAJE JAVA ES UN
  * LENGUAJE DE PROGRAMACION SIMPLE PORQUE LA SINTAXIS DE JAVA SE BASA EN C++ (POR LO QUE ES MAS FACIL PARA LOS PROGRAMADORES
  * APRENDERLA DESPUES DE C++) JAVA HA ELIMANDO MUCHAS CARATERISTICAS COMPLICADAS Y POCO UTILIZADAS, POR EJEMPLO PUNTEROS
  * EXPLICITOS, SOBRE CARGA DE CONSTRUCTORES, NO ES NECESARIO ELIMINAR OBJETOS SIN REFERENCI PORQUE HAY UNA RECOLECCION 
  * AUTOMATICA DE BASURA EN JAVA.
  * 
  * ORIENTADO A OBJETO : JAVA IMPLEMENTA LA TECNOLOGIA BASICA DE C++ CON ALGUNAS MEJORAS Y ELIMINA ALGUNAS COSAS PARA MANTENER EL
  * OBJETIVO DE LA SIMPLICIDAD DEL LENGUAJE. JAVA TRABAJA CON SUS DATOS COMO OBJETOS Y CON INTERFACES A ESOS OBJETOS. SOPORTA 
  * TRES CARACTERISTICAS PROPIAS DEL PARADIGMA DE LA PROGRAMACION ORIENTACION A OBJETOS : ENCAPSULACION, HERENCIA Y POLIMORFISMO.
  * LAS PLANTILLAS DE OBJETOS SON LLAMADAS COMO EN C++, CLASES Y SUS COPIAS, INSTANCIAS, ESTAS INSTANCIAS, COMO EN C++, NECESITAN
  * SER CONSTRUIDAS Y DESTRUIDAS EN ESPACIOS DE MEMORIA.
  * 
  * ES DISTRIBUIDO : JAVA SE HA CONSTRUIDO CON EXTENSAS CAPACIDADES DE INTERCONEXION TCP/IP. EXISTEN LIBRERIAS DE RUTINAS PARA 
  * ACCEDER E INTERACTUAR CON PROTOCOLOS COMO HTTP Y FTP. ESTO PERMITE A LOS PROGRAMADORES ACCEDER A LA INFORMACION A TRAVES DE 
  * LA RED CON TANTA FACILIDAD COMO A LOS FICHEROS LOCALES. LA VERDAD ES QUE JAVA NO ES DISTRIBUIDO, SINO QUE PROPORCIONA LAS 
  * LIBRERIAS Y HERRAMIENTAS PARA QUE LOS PROGRAMAS PUEDAN SER DISTRIBUIDOS, ES DECIR, QUE SE CORRAN EN VARIAS MAQUINAS, 
  * INTERACTUANDO.
  * 
  * ES ROBUSTO : JAVA REALIZA VERIFICACIONES EN BUSCA DE PROBLEMAS TANTO EN TIEMPO DE COMPILACION COMO EN TIEMPO DE EJECUCION.
  * LA COMPROBACION DE TIPOS EN JAVA AYUDA A DETECTAR ERRORES, LO ANTES POSIBLE, EN EL CICLO DE DESARROLLO. JAVA OBLIGA A LA 
  * DECLARACION EXPLICITA DE METODOS, REDUCIENDO ASI LAS POSIBLIDADES DE ERROR. MANEJA LA MEMORIA PARA ELIMINIAR LAS 
  * PREOCUPACIONES POR PARTE DEL PROGRAMADOR DE LA LIBERACION O CURRUPCION DE LA MEMORIA. ADEMAS PARA ASEGURAR EL FUNCIONAMIENTO 
  * DE LA APLICACION, REALIZA UNA VERIFICACION DE LOS BYTE-CODES, QUE SON EL RESULTADO DE LA COMPILACION DE UN PROGRAMAM JAVA.
  * ES UN CODIGO DE MAQUINA VIRTUAL QUE ES INTERPRETADO POR EL INTERPRETE JAVA. NON ES EL CODIGO MAQUINA DIRECTAMENTE ENTENDIBLE 
  * POR EL HARDWARE.
  * 
  * ARQUITECTURA NEUTRAL : PARA ESTABLECER JAVA COMO PARTE INTEGRAL DE LA RED, EL COMPILADOR JAVA COMPILA SU CODIGO A UN FICHERO
  * OBJETO DE FORMATO INDEPENDIENTE DE LA ARQUITECTURA DE LA MAQUINA EN LA QUE SE EJECUTARA. CUALQUIER MAQUINA QUE TENGA EL 
  * SISTEMA DE EJECUCION (RUN-TIME) PUEDE EJECUTAR ESE CODIGO ABIERTO, SIM IMPORTAR EN MODO ALGUNO LA MAQUINA EN QUE SE HA 
  * GENERADO YA SEA WINDOWS, SOLARIS, LINUX, ETC..
  * 
  * SEGURO : LA SEGURIDAD EN JAVA TIENE DOS FACETAS EN EL LENGUAJE, LA CARATERISTICAS COMO LOS PUNTEROS O EL CASTING IMPLICITO
  * QUE HACEN LOS COMPIDARORES DE C Y C++, SE ELIMINAN PARA PREVENIR EL ACCESO ILEGAL A LA MEMORIA. CUANDO SE USA JAVA PARA CREAR
  * UN NAVEGADOR, SE COMBINAN LAS CARATERISTICAS DEL LENGUAJE CON PROTECCIONES DE SENTIDO COMUN APLICADAS AL PROPIO NAVEGADOR.
  * 
  * PORTABLE : MAS ALLA DE LA PORTABILIADAD BASICA POR SER DE ARQUITECTURA INDEPENDIENTE, JAVA IMPLEMENTA OTROS ESTANDARES DE 
  * PORTABILIDAD PARA FACILITAR EL DESARROLLO. LOS ENTEROS SON SIEMPRE ENTEROS Y ADEMAS, ENTEROS DE 32 BITS EN COMPLEMENTO A 2.
  * ADEMAS JAVA CONSTRUYE SUS INTERFACES DE USUARIOS A TRAVEZ DE UN SISTEMA ABSTRACYO DE VENTANAS DE FORMA QUE LAS VENTANAS 
  * PUEDAN SER IMPLEMENTADAS EN ENTORNO UNIX, PC O MAC.
  * 
  * INTERPRETADO : EL INTERPRETE JAVA (SISTEMA RUN-TIME) PUEDE EJECUTAR DIRECTAMENTE EL CODIGO OBJETO. ENLAZAR (LINKAR) UN 
  * PROGRAMA NORMALMENTE CONSUME MENOS RECURSOS QUE COMPIPALRLO, POR LO QUE LOS DESARROLLADORES CON JAVA PASARAN MAS TIEMNPO 
  * DESARROLLANDO Y MENOS ESPERANDO POR EL ORDENADOR. NO OBSTANTE EL COMPILADOR ACTUAL DEL JDK ES BASTANTE LENTO POR AHORA YA QUE 
  * TODAVIA NO HAY COMPILADORES ESPECIFICOS DE JAVA PARA DIVERSAS PLATAFORMAS, JAVA ES MAS LENTO QUE OTROS LENGUAJES DE 
  * PROGRAMACION COMO C++, YA QUE DEBE SER INTERPRETADO Y NO EJECUTADO COMO SUCEDE EN CUALQUIER PROGRAMA TRADICIONAL.
  * 
  * MULTITHREADED : AL SER MULTITHREADED (MULTIHILVANADO, EN MALA TRADUCCION), JAVA PERMITE MUCHAS ACTIVIDADES SIMULTANEAS EN UN
  * PROGRAMA. LOS THREADS (A VECES LLAMADOS PROCESOS LIGEROS) SON BASICAMENTE PEQUEÑOS PROCESOS O PIEZAS INDEPENDIENTES DE UN 
  * GRAN PROCESO. AL ESTAR LOS THREADS CONSTRUIDOS EN EL LENGUAJE, SON MAS FACILES DE USAR Y MAS ROBUSTOS QUE SON SUS HOMOLOGOS 
  * EN C O C++
  * 
  * DINAMICO : JAVA SE BENEFICIA TODO LO POSIBLE DE LA TECNOLOGIA ORIENTADA A OBJETOS. JAVA NO INTENTA CONECTAR TODOS LOS MODULOS
  * QUE COMPRENDEN UNA APLICACION HASTA EL TIEMPO DE EJECUCION. LAS LIBRERIAS NUEVAS O ACTUALIZADAS NO PARALIZARAN LAS 
  * APLICACIONES ACTUALES (SIEMPRE QUE MANTENGA LA API ANTERIROR).
  *******************************************************************************************************************************
  *******************************************************************************************************************************
  * ESTRUCTURA PRINCIPAL DE JAVA :  UN PROGRAMA EN JAVA TIENE LA SIGUIENTE ESTRUCTURA :
  * 
  * 	public class Saludo1 {

          public static void main( String[] args) {
            System.out.println("Saludos desde Mexicali");

            } //Fin del metodo main.

        } // //Fin de la clase.
  *******************************************************************************************************************************
  *******************************************************************************************************************************
  * PACKAGE : UN PAQUETE ES UNA AGRUPACION DE CLASES ES PARECIDO A UNA CAJA QUE CONTIENE LAS CLASES QUE QUEREMOS MANTENER EN UN 
  * SOLO LUGAR. TAMBIEN PODRIA DECIRSE QUE LOS packages ES EL EQUIVALENTE A LAS LIBRERIAS EN OTROS LENGUAJES, ESTA PARTE DEL 
  * CODIGO NO ES OBLIGATORIA, ES SOLO SI LO NECESITA USAR NUESTRO PROGRAMA. PARA CREAR UN "package", SE DEBE IR DENTRO DEL 
  * PROYECTO, LUEGO IR A LA CARPETA LLAMADA SRC, CLICK DERECHO LUEGO NEW Y BUSCAR PACKAGE.
  * 
  * IMPORT : EN OCASIONES NUESTROS PROGRAMAS REUQUERIDAN UTILIZAR CLASES EXIXTENTES EN OTROS Packages, Y ESTO SE PUEDE LOGRAR COM
  * IMPORT, PARA IMPORTAR UNA CLASE QUE SE ENCUENTRA EN OTRO OTRO PROYECTO SE HACE AVECES DE MANERA AUTOMATICA AL ESCRIBIR ALGUNA 
  * CLASE.
  *******************************************************************************************************************************
  ******************************************************************************************************************************* 
  * CLASES : JAVA PUEDE CREAR DIFERENTES TIPOS DE CLASES : PRIVADAS, PUBLICAS Y PROTEGIDAS, SE UTILIZAN DE ACUERDO A CONVENIENCIA
  * DE LA ESTRUCTURA DE NUESTRO PROGRAMA. ES IMPORTANTE RECORDAR QUE TODO ABSOLUTAMENTE TODO DEBE ESTAR DENTRO DE LA CLASE,
  * 
  *    public class Clase1 {
  *    		// TODO DEBE DE IR DENTRO DE LAS LLAVES.
  *    }
  *    
  * NOTA : TODA CLASE DEBE COMENZAR CON LA PRIMERA LETRA MAYUSCULA, NO DEBE DE TENER ESPACIOS EN BLANCO, NO DEBE TENER CARACTERES
  * EXTRAÑOS COMO $, @, ETC, TAMPOCO DEBE COMENZAR CON NUMEROS, PERO SI PUEDE CONTENER NUMEROS PERO DESPUES DEL NOMBRE DE LA 
  * CLASE, ESTAS REGLAS EN JAVA SON IMPORTANTES DE TENER EN MENTE SIEMPRE A LA HORA DE CREAR UNA CLASE EN JAVA. EJEMPLO :
  *******************************************************************************************************************************
  ******************************************************************************************************************************* 
  * METODO main : ESTE METODO ES EL METODO PRINCIPAL DE UNA CLASE JAVA, DENTRO DE ESTE METODO ES DONDE SE EJECUTARANN TODOS 
  * PROGRAMAS EN JAVA, EJEMPLO: 
  * 
  *    public static void main(String [] args) {
  *    
  *    		AQUI SE EJECUTAN TODOS LOS PROGRAMAS JAVA
  *     }
  *  
  *******************************************************************************************************************************
  *******************************************************************************************************************************
  * System.out.println : ESTE METODO PRINT SE ENCARGA DE IMPRIMIR POR CONSOLA. PARA IMPRIMIR POR CONSOLO SE DEBE TENER EN CUENTA 
  * QUE TIPO DE OBJETO U VARIBLE SE QUIERE IMPRIMIR, EJEMPLO :
  * 
  * 	System.out.println("Soy una cadena de texto");
  *     System.out.println(numero);
  *     System.out.println(JOptionPane.ShowInputDialog("soy una clase"));
  *******************************************************************************************************************************
  *******************************************************************************************************************************   
  * COMENTARIOS EN JAVA : ESTOS PUEDEN INCLUIRSE EN CUALQUIER PARTE DEL CODIGO. SUS LINEAS SERAN COMPLETAMENTE INGNORADAS POR EL 
  * COMPILADOR O SEA QUE NO AFECTARAN PARA NADA A NUESTRO PROGRAMA. EXISTEN VARIOS TIPOS DE COMENTARIOS, COMENTARIOS DE UNA LINEA 
  * Y COMENTARIOS DE MULTIPLES LINEAS.
  *******************************************************************************************************************************
  *******************************************************************************************************************************
  * PALABRAS RESERVADAS : EXISTEN UNA SERIES DE PALABRAS RESERVADAS QUE NO PUEDEN EMPLEARSE COMO NOMBRES DE VARIABLES POR EL
  * PROGRAMADOR EN EL CODIGO FUENTE PARA OTROS USO. POR EJEMPLO LA PALABRA RESERVADA double SE UTILIZA PARA DEFINIR UN TIPO DE 
  * DATO REAL, Y LA PALABRA RESERVADA for SE EMPLEA PARA CONSTRUIR UN TIPO DETERMOINADO DE BUCLE, LAS PALABRAS RESERVADAS EN JAVA 
  * SON :
  * 
  *  Abstract, do, implements, protected, throw, boolean, doublé, import, public, throws, break, else, instanceof, rest, 
  *  transient, byte, extends,int, return, true, case, false, interface, short, try, catch, final, long, static, void, char, 
  *  finally, native, strictfp, volatile, class, float, new, super, while, const*, for, null, switch, continue, goto*, package, 
  *  synchronized, default, if, private, this.
  *******************************************************************************************************************************
  *******************************************************************************************************************************
 **/
	


}